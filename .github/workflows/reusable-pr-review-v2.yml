name: Reusable PR Review v2 (Multi-Role)

on:
  workflow_call:
    inputs:
      pr_number:
        description: 'PR番号'
        required: true
        type: string
      repository:
        description: 'リポジトリ名 (owner/repo)'
        required: true
        type: string
      review_type:
        description: 'レビュータイプ (quick/balanced/detailed)'
        required: false
        type: string
        default: 'balanced'
      max_diff_lines:
        description: '差分の最大行数'
        required: false
        type: number
        default: 10000
      models:
        description: '使用するAIモデル設定（JSON）'
        required: false
        type: string
        default: '{"claude": "claude-3-5-sonnet-20241022", "openai": "gpt-4o-mini"}'
      enable_code_suggestions:
        description: 'コード提案を含めるか'
        required: false
        type: boolean
        default: true

jobs:
  multi-role-review:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install anthropic openai PyGithub requests

      - name: Get PR context
        id: pr-context
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "📥 Fetching PR #${{ inputs.pr_number }} from ${{ inputs.repository }}"
          
          # PR情報を取得
          gh pr view ${{ inputs.pr_number }} \
            --repo ${{ inputs.repository }} \
            --json number,title,body,author,createdAt,additions,deletions,files,labels,baseRefName,headRefName \
            > pr_data.json
          
          # 差分を取得
          gh pr diff ${{ inputs.pr_number }} \
            --repo ${{ inputs.repository }} \
            | head -n ${{ inputs.max_diff_lines }} > pr_diff.txt || true
          
          # 変更ファイルリスト
          jq -r '.files[].path' pr_data.json > changed_files.txt || true
          
          # PR統計情報
          echo "PR Stats:"
          echo "- Title: $(jq -r '.title' pr_data.json)"
          echo "- Changes: +$(jq -r '.additions' pr_data.json) -$(jq -r '.deletions' pr_data.json)"
          echo "- Files: $(jq -r '.files | length' pr_data.json)"

      - name: Run multi-role AI review
        id: ai-review
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MODELS_CONFIG: ${{ inputs.models }}
          REVIEW_TYPE: ${{ inputs.review_type }}
          ENABLE_SUGGESTIONS: ${{ inputs.enable_code_suggestions }}
        run: |
          cat > multi_role_review.py << 'PYTHON_SCRIPT'
          import os
          import json
          import anthropic
          import openai
          from datetime import datetime
          
          # 設定
          models = json.loads(os.getenv('MODELS_CONFIG'))
          review_type = os.getenv('REVIEW_TYPE', 'balanced')
          enable_suggestions = os.getenv('ENABLE_SUGGESTIONS', 'true').lower() == 'true'
          
          # データ読み込み
          with open('pr_data.json', 'r') as f:
              pr_data = json.load(f)
          
          try:
              with open('pr_diff.txt', 'r') as f:
                  diff_content = f.read()
          except:
              diff_content = "差分の取得に失敗しました"
          
          try:
              with open('changed_files.txt', 'r') as f:
                  changed_files = [line.strip() for line in f if line.strip()]
          except:
              changed_files = []
          
          # PR情報
          pr_number = pr_data.get('number', 'N/A')
          pr_title = pr_data.get('title', 'No title')
          pr_body = pr_data.get('body', 'No description')
          pr_author = pr_data.get('author', {}).get('login', 'Unknown')
          additions = pr_data.get('additions', 0)
          deletions = pr_data.get('deletions', 0)
          base_branch = pr_data.get('baseRefName', 'unknown')
          head_branch = pr_data.get('headRefName', 'unknown')
          
          # レビュー設定
          review_depth = {
              'quick': {'roles': 2, 'max_items': 2, 'tokens': 300},
              'balanced': {'roles': 3, 'max_items': 3, 'tokens': 500},
              'detailed': {'roles': 4, 'max_items': 5, 'tokens': 800}
          }[review_type]
          
          # レビューロール定義
          all_roles = [
              {
                  'name': 'Security Engineer',
                  'emoji': '🔒',
                  'model': 'claude',
                  'focus': 'セキュリティ脆弱性、認証認可、データ保護、入力検証',
                  'priority': 'critical'
              },
              {
                  'name': 'QA Engineer',
                  'emoji': '🧪',
                  'model': 'openai',
                  'focus': 'テストカバレッジ、エラーハンドリング、エッジケース、回帰リスク',
                  'priority': 'high'
              },
              {
                  'name': 'Senior Architect',
                  'emoji': '🏗️',
                  'model': 'claude',
                  'focus': 'アーキテクチャ、パフォーマンス、保守性、設計パターン',
                  'priority': 'medium'
              },
              {
                  'name': 'Product Manager',
                  'emoji': '📱',
                  'model': 'openai',
                  'focus': 'ユーザー影響、要件適合性、使いやすさ、ビジネス価値',
                  'priority': 'low'
              }
          ]
          
          # 使用するロールを選択
          roles = all_roles[:review_depth['roles']]
          
          # コンテキスト作成
          context = f"""
          PR #{pr_number}: {pr_title}
          Author: @{pr_author}
          Branch: {head_branch} → {base_branch}
          Changes: +{additions} -{deletions} in {len(changed_files)} files
          
          Description:
          {pr_body[:1500]}
          
          Changed files:
          {chr(10).join(f'- {f}' for f in changed_files[:20])}
          {'... and ' + str(len(changed_files) - 20) + ' more files' if len(changed_files) > 20 else ''}
          
          Diff preview:
          {diff_content[:6000]}
          """
          
          # 各ロールでレビュー
          reviews = []
          
          for role in roles:
              prompt = f"""
              あなたは{role['name']}として、以下のPRをレビューしてください。
              観点: {role['focus']}
              
              {context}
              
              {role['priority']}優先度の問題を最大{review_depth['max_items']}個挙げてください。
              {'具体的なコード修正例を含めてください。' if enable_suggestions else ''}
              
              形式:
              {'🚨' if role['priority'] == 'critical' else '⚠️' if role['priority'] == 'high' else 'ℹ️'} 問題: 簡潔な説明
              {'```language' + chr(10) + '// 修正例' + chr(10) + '```' if enable_suggestions else ''}
              """
              
              try:
                  if role['model'] == 'claude':
                      client = anthropic.Anthropic(api_key=os.getenv('ANTHROPIC_API_KEY'))
                      response = client.messages.create(
                          model=models['claude'],
                          max_tokens=review_depth['tokens'],
                          temperature=0.3,
                          messages=[{"role": "user", "content": prompt}]
                      )
                      review_text = response.content[0].text
                  else:
                      client = openai.OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
                      response = client.chat.completions.create(
                          model=models['openai'],
                          max_tokens=review_depth['tokens'],
                          temperature=0.3,
                          messages=[{"role": "user", "content": prompt}]
                      )
                      review_text = response.choices[0].message.content
                  
                  reviews.append({
                      'role': role['name'],
                      'emoji': role['emoji'],
                      'priority': role['priority'],
                      'content': review_text.strip()
                  })
              except Exception as e:
                  print(f"Error in {role['name']} review: {e}")
                  reviews.append({
                      'role': role['name'],
                      'emoji': role['emoji'],
                      'priority': role['priority'],
                      'content': f"レビューエラー: {str(e)[:100]}"
                  })
          
          # 総合評価の作成
          summary_prompt = f"""
          以下の{len(reviews)}人のエンジニアからのレビューを統合して、最終評価を作成してください：
          
          {chr(10).join(f"{r['emoji']} {r['role']}: {r['content']}" for r in reviews)}
          
          以下の形式で簡潔にまとめてください：
          
          ## 判定
          [✅ 承認可能 / ⚠️ 条件付き承認 / 🚫 要修正]
          
          ## 必須対応 (ブロッカー)
          最重要項目のみ、最大3個
          
          ## 推奨対応
          改善提案、最大2個
          
          ## 良い点
          1-2個、簡潔に
          """
          
          # 総合評価生成
          try:
              client = anthropic.Anthropic(api_key=os.getenv('ANTHROPIC_API_KEY'))
              summary_response = client.messages.create(
                  model=models['claude'],
                  max_tokens=600,
                  temperature=0.2,
                  messages=[{"role": "user", "content": summary_prompt}]
              )
              summary = summary_response.content[0].text.strip()
          except:
              summary = "総合評価の生成に失敗しました"
          
          # 最終レポート作成
          report = f"""# 🤖 AI Multi-Role Code Review
          
          **PR:** #{pr_number} {pr_title}
          **Review Type:** {review_type.title()} ({len(roles)} roles)
          **Timestamp:** {datetime.now().strftime('%Y-%m-%d %H:%M UTC')}
          
          {summary}
          
          ---
          
          ## 詳細レビュー by Role
          
          """
          
          # 各ロールのレビューを追加
          for review in reviews:
              if review['content'] and review['content'] != "レビューエラー":
                  report += f"### {review['emoji']} {review['role']}\n\n"
                  report += review['content'] + "\n\n"
          
          report += f"""---
          
          <details>
          <summary>📊 Review Statistics</summary>
          
          - Files changed: {len(changed_files)}
          - Lines: +{additions} -{deletions}
          - Reviewers: {', '.join(r['role'] for r in reviews)}
          - Models: Claude ({models['claude']}), OpenAI ({models['openai']})
          
          </details>
          
          <sub>🤖 Multi-role review by [NFTT-GitHub-Workflows](https://github.com/NFTTechnology/NFTT-GitHub-Workflows) | 💡 [Feedback](https://github.com/NFTTechnology/NFTT-GitHub-Workflows/issues)</sub>
          """
          
          # レポート保存
          with open('review_report.md', 'w', encoding='utf-8') as f:
              f.write(report)
          
          # 判定結果を出力（GitHub Actions用）
          if '✅ 承認可能' in summary:
              print("::set-output name=verdict::approved")
          elif '⚠️ 条件付き承認' in summary:
              print("::set-output name=verdict::conditional")
          else:
              print("::set-output name=verdict::changes_requested")
          
          print("Multi-role review completed successfully")
          PYTHON_SCRIPT
          
          python multi_role_review.py

      - name: Post review comment
        if: success()
        env:
          GH_TOKEN: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}
        run: |
          if [[ -f "review_report.md" ]]; then
            REPORT=$(cat review_report.md)
            
            # PRにコメントを投稿
            gh pr comment ${{ inputs.pr_number }} \
              --repo ${{ inputs.repository }} \
              --body "$REPORT"
            
            echo "✅ Multi-role review posted successfully"
          else
            echo "❌ Review report not found"
            exit 1
          fi

      - name: Add review labels and reactions
        if: success()
        env:
          GH_TOKEN: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER="${{ inputs.pr_number }}"
          REPO="${{ inputs.repository }}"
          
          # レビュー済みラベルを追加
          gh pr edit $PR_NUMBER --repo $REPO --add-label "ai-reviewed" || true
          
          # 判定に基づいてラベルを追加
          VERDICT="${{ steps.ai-review.outputs.verdict }}"
          if [[ "$VERDICT" == "approved" ]]; then
            gh pr edit $PR_NUMBER --repo $REPO --add-label "ready-to-merge" || true
          elif [[ "$VERDICT" == "changes_requested" ]]; then
            gh pr edit $PR_NUMBER --repo $REPO --add-label "needs-work" || true
          fi