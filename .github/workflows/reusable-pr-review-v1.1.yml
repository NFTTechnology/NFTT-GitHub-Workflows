name: Reusable PR Review v1.1 (Debug Enhanced)

on:
  workflow_call:
    inputs:
      pr_number:
        description: 'PR番号'
        required: true
        type: string
      repository:
        description: 'リポジトリ名 (owner/repo)'
        required: true
        type: string
      review_type:
        description: 'レビュータイプ (quick/balanced/detailed)'
        required: false
        type: string
        default: 'balanced'
      max_diff_lines:
        description: '差分の最大行数'
        required: false
        type: number
        default: 5000
      models:
        description: '使用するAIモデル設定（JSON）'
        required: false
        type: string
        default: '{"claude": "claude-3-5-sonnet-20241022", "openai": "gpt-4o-mini"}'
      debug_mode:
        description: 'デバッグモード'
        required: false
        type: boolean
        default: true

jobs:
  pr-review-enhanced:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install anthropic openai PyGithub requests

      - name: Get PR information with debug
        id: pr-info
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔍 Fetching PR #${{ inputs.pr_number }} from ${{ inputs.repository }}"
          
          # PR情報を取得
          gh pr view ${{ inputs.pr_number }} \
            --repo ${{ inputs.repository }} \
            --json number,title,body,author,createdAt,additions,deletions,files,labels \
            > pr_data.json
          
          # 差分を取得（最大行数まで）
          gh pr diff ${{ inputs.pr_number }} \
            --repo ${{ inputs.repository }} \
            | head -n ${{ inputs.max_diff_lines }} > pr_diff.txt || true
          
          # デバッグ情報
          echo "📊 PR Statistics:"
          echo "- Title: $(jq -r '.title' pr_data.json)"
          echo "- Changes: +$(jq -r '.additions' pr_data.json) -$(jq -r '.deletions' pr_data.json)"
          echo "- Files: $(jq -r '.files | length' pr_data.json)"
          echo "- Diff size: $(wc -l < pr_diff.txt) lines / $(wc -c < pr_diff.txt) chars"
          
          # ファイル別の統計
          echo "📁 Changed files:"
          jq -r '.files[] | "- \(.path) (+\(.additions) -\(.deletions))"' pr_data.json
          
          # ソースコードファイルの検出
          echo "🔍 Source code files detected:"
          jq -r '.files[].path' pr_data.json | grep -E '\.(js|ts|py|java|go|rb|php|cs|cpp|c)$' || echo "No source files found"

      - name: Run enhanced AI review
        id: ai-review
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MODELS_CONFIG: ${{ inputs.models }}
          REVIEW_TYPE: ${{ inputs.review_type }}
          DEBUG_MODE: ${{ inputs.debug_mode }}
        run: |
          cat > pr_review_enhanced.py << 'PYTHON_SCRIPT'
          import os
          import json
          import re
          import anthropic
          import openai
          
          # 設定読み込み
          models = json.loads(os.getenv('MODELS_CONFIG'))
          review_type = os.getenv('REVIEW_TYPE', 'balanced')
          debug_mode = os.getenv('DEBUG_MODE', 'true').lower() == 'true'
          
          # PR情報読み込み
          with open('pr_data.json', 'r') as f:
              pr_data = json.load(f)
          
          # 差分読み込み
          try:
              with open('pr_diff.txt', 'r') as f:
                  diff_content = f.read()
          except:
              diff_content = "差分の取得に失敗しました"
          
          # セキュリティパターンの定義
          security_patterns = {
              'password_plain': r'password\s*[:=]\s*["\']?[^"\'\s]+|password\s*[:=]\s*\w+(?!\s*\.)(?!\s*hash)',
              'sql_injection': r'(SELECT|INSERT|UPDATE|DELETE).*\+.*["\']|f["\'].*{.*}.*WHERE',
              'hardcoded_secret': r'(api_key|secret|token)\s*[:=]\s*["\'][^"\']+["\']',
              'unsafe_eval': r'eval\s*\(|exec\s*\(',
              'no_auth': r'@app\.route.*\n(?!.*@(auth|login)_required)',
          }
          
          # ファイルタイプ別の重要度
          file_priorities = {
              '.js': 'high',
              '.ts': 'high',
              '.py': 'high',
              '.java': 'high',
              '.go': 'high',
              '.rb': 'high',
              '.php': 'high',
              '.yml': 'medium',
              '.yaml': 'medium',
              '.json': 'low',
              '.md': 'low'
          }
          
          # PR情報の整理
          pr_number = pr_data.get('number', 'N/A')
          pr_title = pr_data.get('title', 'No title')
          pr_body = pr_data.get('body', 'No description')
          pr_author = pr_data.get('author', {}).get('login', 'Unknown')
          additions = pr_data.get('additions', 0)
          deletions = pr_data.get('deletions', 0)
          files = pr_data.get('files', [])
          
          # ファイル分析
          source_files = []
          config_files = []
          other_files = []
          
          for file in files:
              path = file.get('path', '')
              ext = os.path.splitext(path)[1]
              priority = file_priorities.get(ext, 'low')
              
              file_info = {
                  'path': path,
                  'additions': file.get('additions', 0),
                  'deletions': file.get('deletions', 0),
                  'priority': priority
              }
              
              if priority == 'high':
                  source_files.append(file_info)
              elif priority == 'medium':
                  config_files.append(file_info)
              else:
                  other_files.append(file_info)
          
          # セキュリティパターンのチェック
          security_issues = []
          for pattern_name, pattern in security_patterns.items():
              matches = re.findall(pattern, diff_content, re.IGNORECASE | re.MULTILINE)
              if matches:
                  security_issues.append({
                      'type': pattern_name,
                      'count': len(matches),
                      'samples': matches[:2]  # 最初の2つのサンプル
                  })
          
          # デバッグ情報の出力
          if debug_mode:
              print("=== DEBUG INFO ===")
              print(f"Source files: {len(source_files)}")
              print(f"Config files: {len(config_files)}")
              print(f"Other files: {len(other_files)}")
              print(f"Security patterns found: {len(security_issues)}")
              for issue in security_issues:
                  print(f"- {issue['type']}: {issue['count']} occurrences")
              print("==================")
          
          # レビュー設定
          review_config = {
              'quick': {
                  'focus': 'セキュリティ問題とクリティカルなバグのみ',
                  'max_tokens': 800,
                  'checklist': ['重大なセキュリティ問題', '明らかなバグ', 'クラッシュの可能性']
              },
              'balanced': {
                  'focus': 'セキュリティ、バグ、主要な改善点',
                  'max_tokens': 1500,
                  'checklist': ['セキュリティ脆弱性', 'バグとエラー', 'パフォーマンス', 'コード品質']
              },
              'detailed': {
                  'focus': '包括的なレビュー',
                  'max_tokens': 2500,
                  'checklist': ['セキュリティ', 'バグ', 'パフォーマンス', 'コード品質', 
                               'テスト', 'ドキュメント', 'ベストプラクティス', '保守性']
              }
          }
          
          config = review_config[review_type]
          
          # ソースコード中心の差分抽出
          source_diff = ""
          if source_files:
              for file in source_files:
                  file_pattern = rf"diff --git.*{re.escape(file['path'])}.*?(?=diff --git|$)"
                  file_diff = re.search(file_pattern, diff_content, re.DOTALL)
                  if file_diff:
                      source_diff += file_diff.group(0) + "\n\n"
          
          # レビュープロンプト（改善版）
          prompt = f"""
          以下のPRをセキュリティとコード品質の観点から厳密にレビューしてください。
          
          ## 重要: 必ず確認すべきセキュリティパターン
          以下のパターンを見つけた場合は必ず指摘してください：
          1. パスワードの平文保存（password: <値> の形式）
          2. SQLインジェクション（文字列結合でのSQL構築）
          3. ハードコードされた認証情報
          4. 不適切なエラーハンドリング（-1チェックなし等）
          5. 安全でない関数の使用（eval, exec等）
          
          ## PR情報
          - タイトル: {pr_title}
          - 変更: +{additions} -{deletions} ({len(files)} files)
          - ソースファイル数: {len(source_files)}
          
          ## 検出されたセキュリティパターン
          {chr(10).join(f"- {issue['type']}: {issue['count']}件検出" for issue in security_issues) if security_issues else "自動検出なし（目視確認必要）"}
          
          ## 主要なソースコードの変更
          {source_diff[:10000] if source_diff else "ソースコードの変更なし"}
          
          ## その他の差分
          {diff_content[:5000] if not source_diff else "（省略）"}
          
          ## レビュー指示
          レビュータイプ: {review_type} - {config['focus']}
          チェック項目: {', '.join(config['checklist'])}
          
          出力形式:
          ## 🚨 セキュリティ問題
          （検出された場合、具体的な行番号とコード例を含めて）
          
          ## ⚠️ バグ・品質問題
          （エラーハンドリング、パフォーマンス等）
          
          ## 💡 改善提案
          （より良い実装方法）
          
          ## ✅ 良い点
          （1-2個）
          
          必ず実際のコードを引用して具体的に指摘してください。
          """
          
          # AI実行（Claudeを優先）
          try:
              client = anthropic.Anthropic(api_key=os.getenv('ANTHROPIC_API_KEY'))
              response = client.messages.create(
                  model=models['claude'],
                  max_tokens=config['max_tokens'],
                  temperature=0.2,  # より決定的な出力
                  messages=[{"role": "user", "content": prompt}]
              )
              review_content = response.content[0].text
          except Exception as e:
              # フォールバック: OpenAI
              try:
                  client = openai.OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
                  response = client.chat.completions.create(
                      model=models['openai'],
                      max_tokens=config['max_tokens'],
                      temperature=0.2,
                      messages=[{"role": "user", "content": prompt}]
                  )
                  review_content = response.choices[0].message.content
              except Exception as e2:
                  review_content = f"レビューエラー: {e}, {e2}"
          
          # デバッグ情報を含むレビュー結果
          debug_info = ""
          if debug_mode:
              debug_info = f"""
          <details>
          <summary>🔍 Debug Information</summary>
          
          - Source files reviewed: {len(source_files)}
          - Security patterns detected: {len(security_issues)}
          - Diff size: {len(diff_content)} chars
          - Source diff extracted: {len(source_diff)} chars
          
          </details>
          
          """
          
          # レビュー結果の整形
          review_report = f"""# 🤖 AI Code Review (v1.1 Debug)
          
          **PR:** #{pr_number} {pr_title}
          **Type:** {review_type.title()}
          **Files:** {len(source_files)} source, {len(config_files)} config, {len(other_files)} other
          
          {review_content}
          
          ---
          {debug_info}
          <sub>🤖 Enhanced review by AI ({models['claude']} / {models['openai']}) | [Powered by NFTT-GitHub-Workflows](https://github.com/NFTTechnology/NFTT-GitHub-Workflows)</sub>
          """
          
          # 結果を保存
          with open('review_report.md', 'w', encoding='utf-8') as f:
              f.write(review_report)
          
          print("Enhanced review completed successfully")
          PYTHON_SCRIPT
          
          python pr_review_enhanced.py

      - name: Post review comment
        if: success()
        env:
          GH_TOKEN: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}
        run: |
          if [[ -f "review_report.md" ]]; then
            REPORT=$(cat review_report.md)
            
            # PRにコメントを投稿
            gh pr comment ${{ inputs.pr_number }} \
              --repo ${{ inputs.repository }} \
              --body "$REPORT"
            
            echo "✅ Enhanced review posted successfully"
          else
            echo "❌ Review report not found"
            exit 1
          fi

      - name: Add review labels
        if: success()
        env:
          GH_TOKEN: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}
        run: |
          # セキュリティ問題が検出された場合のラベル追加
          if grep -q "🚨 セキュリティ問題" review_report.md; then
            gh pr edit ${{ inputs.pr_number }} \
              --repo ${{ inputs.repository }} \
              --add-label "security-issue" || true
          fi
          
          # レビュー済みラベルを追加
          gh pr edit ${{ inputs.pr_number }} \
            --repo ${{ inputs.repository }} \
            --add-label "ai-reviewed" || true