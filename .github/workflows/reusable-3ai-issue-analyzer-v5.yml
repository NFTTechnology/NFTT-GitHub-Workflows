name: 3AI Issue Analyzer v5 (Cost Optimized)

on:
  workflow_call:
    inputs:
      issue_number:
        description: 'Issue number to analyze'
        required: true
        type: number
      issue_title:
        description: 'Issue title'
        required: true
        type: string
      issue_body:
        description: 'Issue body'
        required: true
        type: string
      repository:
        description: 'Repository name (owner/repo)'
        required: true
        type: string
      comment_id:
        description: 'Comment ID that triggered the analysis'
        required: false
        type: number
      include_comments:
        description: 'Include comment history in analysis'
        required: false
        type: boolean
        default: true
      max_comments:
        description: 'Maximum number of recent comments to include'
        required: false
        type: number
        default: 30
    secrets:
      ANTHROPIC_API_KEY:
        required: true
      OPENAI_API_KEY:
        required: true
      GEMINI_API_KEY:
        required: true
    outputs:
      analysis_report:
        description: '3AI analysis report'
        value: ${{ jobs.analyze.outputs.report }}

jobs:
  analyze:
    runs-on: ubuntu-latest
    outputs:
      report: ${{ steps.post-result.outputs.report }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Get comment history
        id: get-comments
        if: inputs.include_comments
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ inputs.issue_number }},
              per_page: ${{ inputs.max_comments }}
            });
            
            // 最新のコメントから取得
            const commentHistory = comments.data.reverse().map(comment => ({
              author: comment.user.login,
              created_at: comment.created_at,
              body: comment.body
            }));
            
            // コメント履歴をJSON形式で保存
            core.setOutput('comments_json', JSON.stringify(commentHistory));
            console.log(`Found ${commentHistory.length} comments`);
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install anthropic openai google-generativeai
      
      - name: React to comment
        if: inputs.comment_id
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ inputs.comment_id }},
              content: 'rocket'
            });
      
      - name: Run 3AI Issue Analysis
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          COMMENTS_JSON: ${{ steps.get-comments.outputs.comments_json }}
        run: |
          cat > analyze_issue.py << 'PYTHON_SCRIPT'
          import os
          import json
          import anthropic
          import openai
          import google.generativeai as genai
          from datetime import datetime
          
          # Issue情報
          issue_number = "${{ inputs.issue_number }}"
          issue_title = """${{ inputs.issue_title }}"""
          issue_body = """${{ inputs.issue_body }}"""
          
          print(f"🔍 3AI分析開始: Issue #{issue_number}")
          print("=" * 50)
          
          # コメント履歴を取得
          comments_json = os.getenv("COMMENTS_JSON", "[]")
          comments = json.loads(comments_json) if comments_json else []
          
          # Phase 0: コメント要約（安価なモデルで実施）
          summary_context = ""
          if comments:
              print(f"📝 {len(comments)}件のコメントを要約中...")
              
              # Claude Haikuで要約（安価）
              try:
                  claude_client = anthropic.Anthropic(api_key=os.getenv("ANTHROPIC_API_KEY"))
                  
                  # コメント履歴を整形
                  comments_text = ""
                  for comment in comments:
                      comments_text += f"@{comment['author']} ({comment['created_at']}):\n{comment['body']}\n\n---\n\n"
                  
                  summary_prompt = f"""
                  以下のIssueのコメント履歴を要約してください。重要なポイント、決定事項、技術的な議論を中心にまとめてください：
                  
                  # Issue: {issue_title}
                  
                  ## コメント履歴
                  {comments_text}
                  
                  以下の形式で要約してください：
                  - 主要な議論ポイント
                  - 合意された事項
                  - 未解決の課題
                  - 技術的な提案や懸念事項
                  """
                  
                  # Claude Haiku（安価）を使用
                  summary_response = claude_client.messages.create(
                      model="claude-3-haiku-20240307",
                      max_tokens=1000,
                      messages=[{"role": "user", "content": summary_prompt}]
                  )
                  summary_context = f"\n\n## 💬 議論の要約\n{summary_response.content[0].text}"
                  print("✅ コメント要約完了（Claude Haiku使用）")
                  
              except Exception as e:
                  print(f"要約エラー: {e}")
                  # エラー時は生のコメントを一部含める
                  recent_comments = "\n\n## 💬 最新のコメント（要約失敗）\n"
                  for comment in comments[:5]:  # 最新5件のみ
                      recent_comments += f"@{comment['author']}: {comment['body'][:200]}...\n\n"
                  summary_context = recent_comments
          
          # 分析用のコンテキストを準備
          analysis_context = f"""
          # Issue #{issue_number}: {issue_title}
          
          ## 📝 Issue本文
          {issue_body}
          {summary_context}
          """
          
          try:
              # Phase 1: Claude Sonnet - 概要と実装提案（高性能モデル）
              claude_client = anthropic.Anthropic(api_key=os.getenv("ANTHROPIC_API_KEY"))
              
              claude_prompt = f"""
              以下のIssueを分析してください：
              
              {analysis_context}
              
              以下の観点から分析してください：
              1. 問題の本質的な理解（要約された議論も考慮）
              2. 技術的な課題と解決アプローチ
              3. 実装の具体的なステップ
              4. 潜在的なリスクと対策
              5. 成功基準の明確化
              
              開発者が実装を開始できる具体的な提案をしてください。
              """
              
              print("🤖 Claude Sonnet分析中...")
              claude_response = claude_client.messages.create(
                  model="claude-3-5-sonnet-20241022",
                  max_tokens=2000,
                  messages=[{"role": "user", "content": claude_prompt}]
              )
              claude_analysis = claude_response.content[0].text
              print("✅ Claude分析完了")
              
              # Phase 2: Gemini Flash - 技術詳細（高速・安価）
              genai.configure(api_key=os.getenv("GEMINI_API_KEY"))
              model = genai.GenerativeModel('gemini-1.5-flash')
              
              gemini_prompt = f"""
              以下のIssueを技術的観点から分析してください：
              
              {analysis_context}
              
              Claudeの分析：
              {claude_analysis}
              
              以下の技術的観点から詳細な分析を行ってください：
              1. アーキテクチャの考慮事項
              2. パフォーマンスへの影響
              3. セキュリティの観点
              4. テスト戦略
              5. 実装の技術的な注意点
              """
              
              print("🔮 Gemini Flash分析中...")
              gemini_response = model.generate_content(gemini_prompt)
              gemini_analysis = gemini_response.text
              print("✅ Gemini分析完了")
              
          except Exception as e:
              print(f"Gemini error: {e}")
              gemini_analysis = "技術分析でエラーが発生しました。"
          
          # Phase 3: GPT-3.5 - UXとドキュメント（安価）
          try:
              openai.api_key = os.getenv("OPENAI_API_KEY")
              client = openai.OpenAI()
              
              ux_prompt = f"""
              以下のIssueをUX観点から分析してください：
              
              {analysis_context}
              
              以下の観点から分析してください：
              1. ユーザー体験への影響
              2. UIの改善提案
              3. ドキュメントの必要性
              4. ユーザーへの影響範囲
              """
              
              print("🎨 GPT-3.5分析中...")
              # GPT-3.5を使用（安価）
              openai_response = client.chat.completions.create(
                  model="gpt-3.5-turbo",
                  messages=[{"role": "user", "content": ux_prompt}],
                  max_tokens=1500
              )
              openai_analysis = openai_response.choices[0].message.content
              print("✅ OpenAI分析完了")
              
          except Exception as e:
              print(f"OpenAI error: {e}")
              openai_analysis = "UX分析でエラーが発生しました。"
          
          # Phase 4: Claude Haikuで統合（安価）
          try:
              final_prompt = f"""
              3つのAIによる分析結果を統合して、開発者向けの実装提案を作成してください：
              
              Claude分析: {claude_analysis[:1000]}...
              Gemini分析: {gemini_analysis[:1000]}...
              OpenAI分析: {openai_analysis[:1000]}...
              
              簡潔で実用的な提案にまとめてください。
              """
              
              # Claude Haikuで統合（安価）
              final_response = claude_client.messages.create(
                  model="claude-3-haiku-20240307",
                  max_tokens=2000,
                  messages=[{"role": "user", "content": final_prompt}]
              )
              
              # 最終レポート作成
              with open('issue_analysis.txt', 'w', encoding='utf-8') as f:
                  f.write(f"# 🤖 3AI分析レポート: Issue #{issue_number}\n\n")
                  f.write(f"**Issue**: {issue_title}\n")
                  f.write(f"**Repository**: ${{ inputs.repository }}\n")
                  f.write(f"**分析日時**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                  if comments:
                      f.write(f"**コメント数**: {len(comments)}件（要約済み）\n")
                  f.write("\n---\n\n")
                  f.write(final_response.content[0].text)
                  f.write("\n\n---\n\n")
                  f.write("## 💰 コスト最適化された分析\n\n")
                  f.write("- 📝 **要約**: Claude Haiku（安価）\n")
                  f.write("- 🤖 **メイン分析**: Claude Sonnet（高性能）\n")
                  f.write("- 🔮 **技術分析**: Gemini Flash（高速・安価）\n")
                  f.write("- 🎨 **UX分析**: GPT-3.5（安価）\n")
                  f.write("- 🔄 **統合**: Claude Haiku（安価）\n\n")
                  f.write("*Powered by [NFTT-GitHub-Workflows](https://github.com/NFTTechnology/NFTT-GitHub-Workflows)*")
              
              print("\n✅ 3AI分析完了（コスト最適化版）")
              
          except Exception as e:
              print(f"Final integration error: {e}")
              with open('issue_analysis.txt', 'w', encoding='utf-8') as f:
                  f.write(f"## ⚠️ 分析エラー\n\n3AI分析の実行中にエラーが発生しました。\n\nエラー: {str(e)}")
          PYTHON_SCRIPT
          
          python analyze_issue.py
      
      - name: Post Analysis Result
        id: post-result
        if: inputs.issue_number
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const fs = require('fs');
            
            // ファイルが存在するか確認
            if (!fs.existsSync('issue_analysis.txt')) {
              console.error('❌ 分析結果ファイルが見つかりません');
              core.setOutput('report', '分析結果ファイルが見つかりません');
              return;
            }
            
            // ファイルを読み込む
            const report = fs.readFileSync('issue_analysis.txt', 'utf8');
            
            // Issueにコメントを投稿
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ inputs.issue_number }},
              body: report
            });
            
            // 出力として保存（エスケープ処理）
            const escapedReport = report.replace(/"/g, '\\"').replace(/\n/g, '\\n');
            core.setOutput('report', escapedReport);
            
            console.log('✅ 分析結果を投稿しました');