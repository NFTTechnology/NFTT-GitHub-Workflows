# 統合AIレビューシステム - Issue/PR両対応
---
name: AI Review System

on:
  workflow_dispatch:
    inputs:
      issue-number:
        required: true
        type: string
        description: "Issue or PR number to review"
      review-type:
        required: false
        type: choice
        description: "Type of review"
        default: 'auto'
        options:
          - auto      # 自動判定
          - issue     # Issue用レビュー
          - pr        # PR用詳細レビュー
      priority:
        required: false
        type: choice
        description: "Review priority"
        default: 'normal'
        options:
          - high
          - normal
          - low

  workflow_call:
    inputs:
      issue-number:
        required: true
        type: string
      review-type:
        required: false
        type: string
        default: 'auto'
      priority:
        required: false
        type: string
        default: 'normal'

concurrency:
  group: ai-review-${{ inputs.issue-number }}-${{ inputs.priority }}
  cancel-in-progress: false

permissions:
  contents: read
  issues: write
  pull-requests: write
  id-token: write

env:
  # AIモデル設定
  ANTHROPIC_MODEL: claude-3-5-sonnet-20241022
  OPENAI_MODEL: gpt-4o-mini
  ANTHROPIC_TEMPERATURE: 0.3
  # デフォルトトークン数（PRの場合は自動的に増加）
  ANTHROPIC_MAX_TOKENS: 2000

defaults:
  run:
    shell: bash

jobs:
  prepare-review:
    runs-on: ubuntu-latest
    outputs:
      is-pr: ${{ steps.check-type.outputs.is-pr }}
      max-tokens: ${{ steps.check-type.outputs.max-tokens }}
      review-mode: ${{ steps.check-type.outputs.review-mode }}
    steps:
      - name: Check review type
        id: check-type
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Issue/PR判定とレビューモード設定
          ISSUE_NUM="${{ inputs.issue-number }}"
          REVIEW_TYPE="${{ inputs.review-type }}"
          
          echo "Checking #$ISSUE_NUM with review type: $REVIEW_TYPE"
          
          # レビュータイプが明示的にPRと指定されている場合
          if [[ "$REVIEW_TYPE" == "pr" ]]; then
            IS_PR="true"
            REVIEW_MODE="pr"
            MAX_TOKENS="4000"
            echo "Forced PR mode for #$ISSUE_NUM"
          elif [[ "$REVIEW_TYPE" == "issue" ]]; then
            IS_PR="false"
            REVIEW_MODE="issue"
            MAX_TOKENS="2000"
            echo "Forced Issue mode for #$ISSUE_NUM"
          else
            # auto mode - PR存在チェック
            echo "Auto-detecting type for #$ISSUE_NUM"
            
            # まずPRとして取得を試みる
            if gh pr view $ISSUE_NUM --repo ${{ github.repository }} --json number >/dev/null 2>&1; then
              IS_PR="true"
              REVIEW_MODE="pr"
              MAX_TOKENS="4000"
              echo "Auto-detected as PR #$ISSUE_NUM"
            else
              # 次にIssueとして確認
              if gh issue view $ISSUE_NUM --repo ${{ github.repository }} --json number >/dev/null 2>&1; then
                IS_PR="false"
                REVIEW_MODE="issue"
                MAX_TOKENS="2000"
                echo "Auto-detected as Issue #$ISSUE_NUM"
              else
                echo "Error: #$ISSUE_NUM not found as PR or Issue"
                exit 1
              fi
            fi
          fi
          
          echo "is-pr=$IS_PR" >> $GITHUB_OUTPUT
          echo "max-tokens=$MAX_TOKENS" >> $GITHUB_OUTPUT
          echo "review-mode=$REVIEW_MODE" >> $GITHUB_OUTPUT
          
          echo "Final decision: IS_PR=$IS_PR, REVIEW_MODE=$REVIEW_MODE, MAX_TOKENS=$MAX_TOKENS"

  ai-multi-role-review:
    needs: prepare-review
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install anthropic openai PyGithub requests

      - name: Get review context
        id: context
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          ISSUE_NUM="${{ inputs.issue-number }}"
          IS_PR="${{ needs.prepare-review.outputs.is-pr }}"
          
          echo "Fetching context for #$ISSUE_NUM (is PR: $IS_PR)"
          
          if [[ "$IS_PR" == "true" ]]; then
            # PR情報の取得
            echo "Fetching PR data..."
            gh pr view $ISSUE_NUM --repo ${{ github.repository }} --json title,body,url,author,createdAt,additions,deletions,files > pr_data.json || {
              echo "Error: Failed to fetch PR data"
              exit 1
            }
            
            # デバッグ用: PR情報の確認
            echo "PR data fetched successfully:"
            jq -r '.title' pr_data.json
            
            # 差分取得（最大10000行）
            echo "Fetching PR diff..."
            gh pr diff $ISSUE_NUM --repo ${{ github.repository }} | head -n 10000 > diff.txt || {
              echo "Warning: Failed to fetch PR diff, creating empty file"
              touch diff.txt
            }
            
            # 変更ファイル一覧
            echo "Extracting changed files..."
            if jq -r '.files[].path' pr_data.json > changed_files.txt 2>/dev/null; then
              echo "Changed files: $(wc -l < changed_files.txt) files"
            else
              echo "Warning: No files found in PR data"
              touch changed_files.txt
            fi
            
            echo "context-type=pr" >> $GITHUB_OUTPUT
          else
            # Issue情報の取得
            echo "Fetching Issue data..."
            gh issue view $ISSUE_NUM --repo ${{ github.repository }} --json title,body,url,author,createdAt,comments > issue_data.json || {
              echo "Error: Failed to fetch Issue data"
              exit 1
            }
            
            echo "Issue data fetched successfully"
            
            echo "context-type=issue" >> $GITHUB_OUTPUT
          fi
          
          # ファイルの存在確認
          echo "Files created:"
          ls -la *.json *.txt 2>/dev/null || echo "No json/txt files found"

      - name: Run AI review
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MAX_TOKENS: ${{ needs.prepare-review.outputs.max-tokens }}
          REVIEW_MODE: ${{ needs.prepare-review.outputs.review-mode }}
        run: |
          cat > ai_review.py << 'EOF'
          import os
          import sys
          import json
          import anthropic
          import openai
          from github import Github
          
          # 設定
          issue_num = "${{ inputs.issue-number }}"
          review_mode = os.getenv("REVIEW_MODE", "issue")
          max_tokens = int(os.getenv("MAX_TOKENS", "2000"))
          
          # APIクライアント初期化
          anthropic_client = anthropic.Anthropic(api_key=os.getenv("ANTHROPIC_API_KEY"))
          openai_client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
          
          # コンテキスト読み込み
          if review_mode == "pr":
              try:
                  with open("pr_data.json", "r") as f:
                      pr_data = json.load(f)
              except FileNotFoundError:
                  print("Error: pr_data.json not found")
                  sys.exit(1)
              except json.JSONDecodeError as e:
                  print(f"Error: Invalid JSON in pr_data.json: {e}")
                  sys.exit(1)
              
              # diff.txtの読み込み（オプション）
              try:
                  with open("diff.txt", "r") as f:
                      diff_content = f.read()[:8000]  # 最大8000文字
              except FileNotFoundError:
                  print("Warning: diff.txt not found, continuing without diff")
                  diff_content = "Diff not available"
              
              # changed_files.txtの読み込み（オプション）
              try:
                  with open("changed_files.txt", "r") as f:
                      content = f.read().strip()
                      changed_files = content.split("\n") if content else []
              except FileNotFoundError:
                  print("Warning: changed_files.txt not found")
                  changed_files = []
              
              # PR情報の検証
              title = pr_data.get('title', 'No title')
              author_data = pr_data.get('author')
              author = author_data.get('login', 'Unknown') if author_data else 'Unknown'
              additions = pr_data.get('additions', 0)
              deletions = pr_data.get('deletions', 0)
              body = pr_data.get('body') or 'No description provided'
              
              context = f"""
              PR #{issue_num}: {title}
              Author: {author}
              Changes: +{additions} -{deletions} in {len(changed_files)} files
              
              Description:
              {body}
              
              Changed files:
              {', '.join(changed_files[:20])}{'...' if len(changed_files) > 20 else ''}
              
              Diff preview:
              {diff_content}
              """
          else:
              try:
                  with open("issue_data.json", "r") as f:
                      issue_data = json.load(f)
              except FileNotFoundError:
                  print("Error: issue_data.json not found")
                  sys.exit(1)
              except json.JSONDecodeError as e:
                  print(f"Error: Invalid JSON in issue_data.json: {e}")
                  sys.exit(1)
              
              # Issue情報の検証
              title = issue_data.get('title', 'No title')
              author_data = issue_data.get('author')
              author = author_data.get('login', 'Unknown') if author_data else 'Unknown'
              body = issue_data.get('body') or 'No description provided'
              comments = issue_data.get('comments', [])
              
              context = f"""
              Issue #{issue_num}: {title}
              Author: {author}
              
              Description:
              {body}
              
              Comments: {len(comments)}
              """
          
          # 4つのロールでレビュー（改善版）
          roles = [
              {
                  "name": "Security",
                  "emoji": "🔒",
                  "focus": "セキュリティリスク、データ保護、認証認可",
                  "max_items": 3,
                  "priority": "high"
              },
              {
                  "name": "QA",
                  "emoji": "🧪",
                  "focus": "エラーハンドリング、エッジケース、回帰リスク",
                  "max_items": 3,
                  "priority": "medium"
              },
              {
                  "name": "Architecture",
                  "emoji": "🏗️",
                  "focus": "コード品質、パフォーマンス、保守性",
                  "max_items": 2,
                  "priority": "medium"
              },
              {
                  "name": "Product",
                  "emoji": "📱",
                  "focus": "ユーザー価値、要件適合性、実装の妥当性",
                  "max_items": 2,
                  "priority": "low"
              }
          ]
          
          reviews = []
          
          # 各ロールでレビュー実施
          for role in roles:
              prompt = f"""
              {role['name']}エンジニアとして、以下の{'PR' if review_mode == 'pr' else 'Issue'}をレビューしてください。
              観点: {role['focus']}
              
              {context}
              
              重要な{'問題' if role['priority'] == 'high' else '改善点'}を最大{role['max_items']}個挙げてください。
              {'- 必ずコード例を含めること' if review_mode == 'pr' else ''}
              - 実装の現実性を考慮すること（Vercel Functions環境）
              - 簡潔に（各項目2-3行以内）
              
              フォーマット:
              {'🚨' if role['priority'] == 'high' else '⚠️' if role['priority'] == 'medium' else 'ℹ️'} 項目1: 具体的な問題と解決策
              {'```' if review_mode == 'pr' else ''}
              """
              
              try:
                  if role['name'] in ['Security', 'Architecture']:
                      # Claude使用（セキュリティとアーキテクチャ）
                      response = anthropic_client.messages.create(
                          model=os.getenv("ANTHROPIC_MODEL"),
                          max_tokens=300,  # 簡潔なレビューのため削減
                          temperature=0.2,  # より一貫性のある出力
                          messages=[{"role": "user", "content": prompt}]
                      )
                      review_text = response.content[0].text
                  else:
                      # OpenAI使用（QAとProduct）
                      response = openai_client.chat.completions.create(
                          model=os.getenv("OPENAI_MODEL"),
                          max_tokens=300,
                          temperature=0.2,
                          messages=[{"role": "user", "content": prompt}]
                      )
                      review_text = response.choices[0].message.content
                  
                  reviews.append({
                      "role": role['name'],
                      "emoji": role['emoji'],
                      "priority": role['priority'],
                      "content": review_text.strip()
                  })
              except Exception as e:
                  print(f"Error in {role['name']} review: {e}")
                  reviews.append({
                      "role": role['name'],
                      "emoji": role['emoji'],
                      "priority": role['priority'],
                      "content": f"レビューエラー: {str(e)}"
                  })
          
          # 優先度別にレビューを整理
          high_priority = [r for r in reviews if r['priority'] == 'high']
          medium_priority = [r for r in reviews if r['priority'] == 'medium']
          low_priority = [r for r in reviews if r['priority'] == 'low']
          
          summary_prompt = f"""
          以下のレビュー結果を、開発者が即座に行動できる形にまとめてください：
          
          高優先度（セキュリティ）:
          {chr(10).join([r['content'] for r in high_priority])}
          
          中優先度（品質）:
          {chr(10).join([r['content'] for r in medium_priority])}
          
          低優先度（改善）:
          {chr(10).join([r['content'] for r in low_priority])}
          
          出力形式（100文字以内で各セクション）:
          ## 判定: [✅ 承認可能 / ⚠️ 修正後承認 / 🚫 要修正]
          ## 必須修正: 最大3項目（コード例付き）
          ## 推奨事項: 最大2項目（別PR可）
          
          Vercel Functions環境を考慮し、実装可能な提案のみ含めること。
          """
          
          try:
              summary_response = anthropic_client.messages.create(
                  model=os.getenv("ANTHROPIC_MODEL"),
                  max_tokens=500,  # 簡潔なサマリーのため削減
                  temperature=0.1,  # より決定的な出力
                  messages=[{"role": "user", "content": summary_prompt}]
              )
              summary = summary_response.content[0].text.strip()
          except Exception as e:
              summary = f"サマリー生成エラー: {str(e)}"
          
          # 最終レポート作成（改善版）
          final_report = f"""## 🤖 AI Code Review - #{issue_num}
          
          {summary}
          
          ---
          
          ### 詳細レビュー
          
          {"#### 🔒 セキュリティ" + chr(10) + chr(10).join([r['content'] for r in high_priority]) if high_priority else ""}
          
          {"#### 🧪 品質・テスト" + chr(10) + chr(10).join([r['content'] for r in medium_priority if r['role'] == 'QA']) if any(r['role'] == 'QA' for r in medium_priority) else ""}
          
          {"#### 🏗️ アーキテクチャ" + chr(10) + chr(10).join([r['content'] for r in medium_priority if r['role'] == 'Architecture']) if any(r['role'] == 'Architecture' for r in medium_priority) else ""}
          
          ---
          <sub>🤖 Reviewed by AI ({', '.join([f"{r['role']}:{'Claude' if r['role'] in ['Security', 'Architecture'] else 'GPT-4'}" for r in reviews])}) | [改善提案はこちら](https://github.com/NFTTechnology/Pu5h-Remind/issues/new)</sub>
          """
          
          # レポート保存
          with open("review_report.md", "w", encoding="utf-8") as f:
              f.write(final_report)
          
          print("AI review completed successfully")
          EOF
          
          python ai_review.py

      - name: Post review comment
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # レビュー結果を投稿
          if [[ -f "review_report.md" ]]; then
            REPORT=$(cat review_report.md)
            
            if [[ "${{ needs.prepare-review.outputs.is-pr }}" == "true" ]]; then
              gh pr comment ${{ inputs.issue-number }} --repo ${{ github.repository }} --body "$REPORT"
            else
              gh issue comment ${{ inputs.issue-number }} --repo ${{ github.repository }} --body "$REPORT"
            fi
            
            echo "✅ Review posted successfully"
          else
            echo "❌ Review report not found"
            exit 1
          fi

      - name: Add labels based on review
        if: success()
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # レビュー結果に基づいてラベルを追加
          ISSUE_NUM="${{ inputs.issue-number }}"
          
          # 優先度ラベル
          if [[ "${{ inputs.priority }}" == "high" ]]; then
            gh issue edit $ISSUE_NUM --repo ${{ github.repository }} --add-label "priority:high" || true
          fi
          
          # レビュー完了ラベル
          gh issue edit $ISSUE_NUM --repo ${{ github.repository }} --add-label "ai-reviewed" || true